<?php
App::uses('AppController', 'Controller');
class UsersController extends AppController {

	public $name = 'Users';
	public $uses=array('SysConfig.UserAccount');
	public $components=array('Master');
	
	public function index() {
		$data['filter']=array(
			'id'=>array('label'=>'Id'), 
			'name'=>array('label'=>'Name'), 
			'address'=>array('label'=>'Address'), 			
		);
		
		$data['field']=array(
			'id',
			'name',
			'username',
			'email',
			'address'
		);
		$data['url']=array('add','view','edit','delete','ACL'=>array('uac'=>'Userprivilege'),'MENU ACCESS'=>array('uac'=>'menuprivilege'));
		
		$this->Master->__index('UserAccount', $data);
	}

	function view($id = null) {
		$data['field']=array(
			'id',
			'name',
			'username',
			'email',
			'address',
			'phone',
			'website'
		);
		$this->Master->__view('UserAccount', $id, $data);
	}
	
	function add() {		
		$this->Master->__add('UserAccount');
		
		$this->helpers[]='Master';
		$userAccounts = $this->UserAccount->UserAccount->find('list');
		$data['field']=array();
		$data['field'][]=array('name');
		$data['field'][]=array('username');
		$data['field'][]=array('email');
		$data['field'][]=array('address');
		$data['field'][]=array('phone');
		$data['field'][]=array('website');

		$model='UserAccount';
		$this->set('addjs',array('user.js'));		
		$this->set(compact('userAccounts','model','data'));
		$this->render('/Elements/Masters/form');
	}

	function edit($id = null) {
		$this->Master->__edit('UserAccount', $id, null, 2);

		$this->helpers[]='Master';
		$userAccounts = $this->UserAccount->UserAccount->find('list');
		$data['field']=array();
		$data['field'][]=array('name');
		$data['field'][]=array('username');
		$data['field'][]=array('email');
		$data['field'][]=array('address');
		$data['field'][]=array('phone');
		$data['field'][]=array('website');
		$model='UserAccount';
		$this->set('addjs',array('user.js'));
		$this->set(compact('userAccounts','model','data'));
		$this->render('/Elements/Masters/form');
	}

	function delete($id = null) {
		$this->Master->__delete('UserAccount', $id, 'User', null, true);
	}
	
	function Userprivilege($id){
		$this->set('id', $id);
		$this->helpers[]='TreeUtility';
		$this->loadModel('Aro');
		$this->loadModel('Aco');
		$this->loadModel('ArosAco');
		
		if (isset($_POST['acotree'])) { 
			$aro=$this->Aro->find('first', array('conditions'=>"Aro.model IN ('UserAccount') AND Aro.foreign_key IN ($id)", 'recursive'=>0, 'fields'=>'Aro.id'));
			$this->ArosAco->deleteAll('ArosAco.aro_id IN ('.$aro['Aro']['id'].')');
		
			$postAco=array();
			foreach($_POST['acotree'] as $i=>$v) $postAco[]=$i;
		
			$this->request->data['ArosAco']['aro_id']=$aro['Aro']['id'];
			$this->request->data['ArosAco']['_create']=1;
			$this->request->data['ArosAco']['_read']=1;
			$this->request->data['ArosAco']['_update']=1;
			$this->request->data['ArosAco']['_delete']=1;
		
			if ($postAco){
				$aco=$this->Aco->find('all', array('conditions'=>'Aco.id IN ('.implode(',',$postAco).')', 'recursive'=>0, 'fields'=>array('Aco.id', 'Aco.parent_id')));
				if ($aco[0]['Aco']['id']==1) $aco=array(1);
				else $aco=$this->__treeAco($aco, $aco[0]['Aco']['id']);
			
				foreach($aco as $v){
					$this->request->data['ArosAco']['aco_id']=$v;
					$this->ArosAco->create();
					$this->ArosAco->save($this->data);
				}	
			}
			$this->redirect(array('action'=>'index'));
		}
		
		$this->set('aco', $this->Aco->find('all', array('order'=>'Aco.parent_id, Aco.alias')));
		$aro=$this->Aro->find('all', array('conditions'=>"Aro.model IN ('UserAccount') AND Aro.foreign_key IN ($id)"));
		$this->set('permission', $this->ArosAco->find('list', array('conditions'=>"ArosAco.aro_id IN ({$aro[0]['Aro']['id']})", 'fields'=>'ArosAco.aco_id')));
	}
	
	function menuprivilege($id){
		$this->set('id', $id);
		$this->helpers[]='TreeUtility';
		$this->loadModel('SysConfig.Menu');
		$this->loadModel('UsersMenu');
		
		if (isset($_POST['acotree'])) {
			$this->UsersMenu->deleteAll('UsersMenu.User_id IN ('.$id.')');
		
			$postMenu=array();
			foreach($_POST['acotree'] as $i=>$v) $postMenu[]=$i;
		
			$this->request->data['UsersMenu']['User_id']=$id;
		
			if ($postMenu){
				foreach($postMenu as $v){
					$this->request->data['UsersMenu']['menu_id']=$v;
					$this->UsersMenu->create();
					$this->UsersMenu->save($this->data);
				}	
			}
			$this->redirect(array('action'=>'index'));
			
		}
		
		$this->set('menus', $this->Menu->find('all', array('conditions'=>'Menu.is_publish IN (1) AND Menu.type_menu NOT IN (1)','order'=>'Menu.parent_id ASC')));
		$this->set('permission', $this->UsersMenu->find('list', array('conditions'=>"UsersMenu.User_id IN ($id)", 'fields'=>'UsersMenu.menu_id')));
	}
	
	function __treeAco($aAwal, $idAwal){
		
		foreach($aAwal as $i=>$v){
			if($v['Aco']['parent_id']==$idAwal) unset($aAwal[$i]);
			else $idAwal=$v['Aco']['id'];
			
		}
		$aAkhir=array();
		foreach($aAwal as $i=>$v){
			$aAkhir[]=$v['Aco']['id'];
		}
		return $aAkhir;
	}
	
	function to_build_acl() {
        //$this->layout=false;
        set_time_limit(3600);
        if (!Configure::read('debug')) {
			return $this->_stop();
		}
		$log = array();

		$aco =& $this->Acl->Aco;
		$root = $aco->node('controllers');
		if (!$root) {
			$aco->create(array('parent_id' => null, 'foreign_key'=>null, 'model' => null, 'alias' => 'controllers'));
			$root = $aco->save();
			$root['Aco']['id'] = $aco->id; 
			$log[] = 'Created Aco node for controllers';
		} else {
			$root = $root[0];
		}   

		App::import('Core', 'File');
		$Controllers = Configure::listObjects('controller');
		$appIndex = array_search('App', $Controllers);
		if ($appIndex !== false ) {
			unset($Controllers[$appIndex]);
		}
		$baseMethods = get_class_methods('Controller');
		$baseMethods[] = 'build_acl';

		$Plugins = $this->_getPluginControllerNames();
		$Controllers = array_merge($Controllers, $Plugins);

		// look at each controller in app/controllers
		foreach ($Controllers as $ctrlName) {
			$methods = $this->_getClassMethods($this->_getPluginControllerPath($ctrlName));

			// Do all Plugins First
			if ($this->_isPlugin($ctrlName)){
				$pluginNode = $aco->node('controllers/'.$this->_getPluginName($ctrlName));
				if (!$pluginNode) {
					$aco->create(array('parent_id' => $root['Aco']['id'], 'foreign_key'=>null, 'model' => null, 'alias' => $this->_getPluginName($ctrlName)));
					$pluginNode = $aco->save();
					$pluginNode['Aco']['id'] = $aco->id;
					$log[] = 'Created Aco node for ' . $this->_getPluginName($ctrlName) . ' Plugin';
				}
			}
			// find / make controller node
			$controllerNode = $aco->node('controllers/'.$ctrlName);
			if (!$controllerNode) {
				if ($this->_isPlugin($ctrlName)){
					$pluginNode = $aco->node('controllers/' . $this->_getPluginName($ctrlName));
					$aco->create(array('parent_id' => $pluginNode['0']['Aco']['id'], 'foreign_key'=>null, 'model' => null, 'alias' => $this->_getPluginControllerName($ctrlName)));
					$controllerNode = $aco->save();
					$controllerNode['Aco']['id'] = $aco->id;
					$log[] = 'Created Aco node for ' . $this->_getPluginControllerName($ctrlName) . ' ' . $this->_getPluginName($ctrlName) . ' Plugin Controller';
				} else {
					$aco->create(array('parent_id' => $root['Aco']['id'], 'foreign_key'=>null, 'model' => null, 'alias' => $ctrlName));
					$controllerNode = $aco->save();
					$controllerNode['Aco']['id'] = $aco->id;
					$log[] = 'Created Aco node for ' . $ctrlName;
				}
			} else {
				$controllerNode = $controllerNode[0];
			}

			//clean the methods. to remove those in Controller and private actions.
			foreach ($methods as $k => $method) {
				if (strpos($method, '_', 0) === 0) {
					unset($methods[$k]);
					continue;
				}
				if (in_array($method, $baseMethods)) {
					unset($methods[$k]);
					continue;
				}
				$methodNode = $aco->node('controllers/'.$ctrlName.'/'.$method);
				if (!$methodNode) {
					$aco->create(array('parent_id' => $controllerNode['Aco']['id'], 'foreign_key'=>null, 'model' => null, 'alias' => $method));
					$methodNode = $aco->save();
					$log[] = 'Created Aco node for '. $method;
				}
			}
		}
		if(count($log)>0) {
			debug($log);
			$this->Session->setFlash('Terjadi Penambahan fungsi baru');
		}
		else $this->Session->setFlash('Tidak ada fungsi yang perlu ditambahkan dalam tabel acos');
	}

	function _getClassMethods($ctrlName = null) {
		App::import('Controller', $ctrlName);
		if (strlen(strstr($ctrlName, '.')) > 0) {
			// plugin's controller
			$num = strpos($ctrlName, '.');
			$ctrlName = substr($ctrlName, $num+1);
		}
		$ctrlclass = $ctrlName . 'Controller';
		$methods = get_class_methods($ctrlclass);

		// Add scaffold defaults if scaffolds are being used
		$properties = get_class_vars($ctrlclass);
		if (array_key_exists('scaffold',$properties)) {
			if($properties['scaffold'] == 'admin') {
				$methods = array_merge($methods, array('admin_add', 'admin_edit', 'admin_index', 'admin_view', 'admin_delete'));
			} else {
				$methods = array_merge($methods, array('add', 'edit', 'index', 'view', 'delete'));
			}
		}
		return $methods;
	}

	function _isPlugin($ctrlName = null) {
		$arr = String::tokenize($ctrlName, '/');
		if (count($arr) > 1) {
			return true;
		} else {
			return false;
		}
	}

	function _getPluginControllerPath($ctrlName = null) {
		$arr = String::tokenize($ctrlName, '/');
		if (count($arr) == 2) {
			return $arr[0] . '.' . $arr[1];
		} else {
			return $arr[0];
		}
	}

	function _getPluginName($ctrlName = null) {
		$arr = String::tokenize($ctrlName, '/');
		if (count($arr) == 2) {
			return $arr[0];
		} else {
			return false;
		}
	}

	function _getPluginControllerName($ctrlName = null) {
		$arr = String::tokenize($ctrlName, '/');
		if (count($arr) == 2) {
			return $arr[1];
		} else {
			return false;
		}
	}

	/**
	 * Get the names of the plugin controllers ...
	 * 
	 * This function will get an array of the plugin controller names, and
	 * also makes sure the controllers are available for us to get the 
	 * method names by doing an App::import for each plugin controller.
	 *
	 * @return array of plugin names.
	 *
	 */
	function _getPluginControllerNames() {
		App::import('Core', 'File', 'Folder');
		$paths = Configure::getInstance();
		$folder = new Folder();
		$folder->cd(APP . 'plugins');

		// Get the list of plugins
		$Plugins = $folder->read();
		$Plugins = $Plugins[0];
		$arr = array();

		// Loop through the plugins
		foreach($Plugins as $pluginName) {
			// Change directory to the plugin
			$didCD = $folder->cd(APP . 'plugins'. DS . $pluginName . DS . 'controllers');
			// Get a list of the files that have a file name that ends
			// with controller.php
			$files = $folder->findRecursive('.*_controller\.php');

			// Loop through the controllers we found in the plugins directory
			foreach($files as $fileName) {
				// Get the base file name
				$file = basename($fileName);

				// Get the controller name
				$file = Inflector::camelize(substr($file, 0, strlen($file)-strlen('_controller.php')));
				if (!preg_match('/^'. Inflector::humanize($pluginName). 'App/', $file)) {
					if (!App::import('Controller', $pluginName.'.'.$file)) {
						debug('Error importing '.$file.' for plugin '.$pluginName);
					} else {
						/// Now prepend the Plugin name ...
						// This is required to allow us to fetch the method names.
						$arr[] = Inflector::humanize($pluginName) . "/" . $file;
					}
				}
			}
		}
		return $arr;
	}
}
